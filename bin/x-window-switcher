#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from subprocess import check_output
import os

CONFIG_PATH = '~/.x-window-switcher'

DEFAULT_CONFIG = """
0:vscodium.VSCodium,google-chrome.Google-chrome
""".strip()


def raise_window_by_window_id(window_id):
    check_output(['wmctrl', '-i', '-a', str(window_id)])


def get_active_window_id():
    ouput = check_output(['xdotool', 'getactiveWindow']).decode()

    return int(ouput.strip())


def get_wm_state():
    """
    returns: active_desktop_id, active_window_index, windows
    """

    output = check_output(['wmctrl', '-l', '-x']).decode()
    lines = output.splitlines()
    active_window_id = get_active_window_id()

    active_desktop_id = 0
    active_window_index = 0
    windows = {}

    for line in lines:
        window_id, line = line.split(' ', 1)
        desktop_id, line = line.strip().split(' ', 1)
        window_class, _ = line.strip().split(' ', 1)

        desktop_id = int(desktop_id)
        window_id = int(window_id, base=16)

        if desktop_id not in windows:
            windows[desktop_id] = []

        windows[desktop_id].append((window_id, window_class, ))

        if window_id == active_window_id:
            active_desktop_id = desktop_id
            active_window_index = len(windows[desktop_id]) - 1

    return active_desktop_id, active_window_index, windows


if __name__ == '__main__':

    # config ##################################################################
    config = {}

    # create config if not present
    config_path = os.path.expanduser(CONFIG_PATH)

    if not os.path.exists(config_path):
        with open(config_path, 'w+') as f:
            f.write(DEFAULT_CONFIG)
            f.write('\n')

    # parse config
    for line in open(config_path, 'r'):
        line = line.strip()

        if not line:
            continue

        # desktop id
        desktop_id, line = line.split(':', 1)

        desktop_id = int(desktop_id.strip())

        # window classes
        window_classes = []

        for window_class in line.split(','):
            window_class = window_class.strip()
            window_classes.append(window_class)

        config[desktop_id] = window_classes

    # get current wm state ####################################################
    active_desktop_id, active_window_index, windows = get_wm_state()
    windows = windows[active_desktop_id]
    active_window_class = windows[active_window_index][1]

    # cycle through windows on the current desktop ############################
    next_window_id = None

    # cycle by window class
    if active_desktop_id in config:

        # find next window class
        _config = config[desktop_id]
        active_window_class = windows[active_window_index][1]

        if active_window_class in _config:
            active_window_class_index = _config.index(active_window_class)

        else:
            active_window_class_index = 0

        next_window_class_index = active_window_class_index + 1

        if next_window_class_index >= len(_config):
            next_window_class_index = 0

        next_window_class = _config[next_window_class_index]

        # find next window
        index = active_window_class_index

        for _ in range(len(windows)):
            index += 1

            if index >= len(windows):
                index = 0

            window_id, window_class = windows[index]

            if window_class == next_window_class:
                next_window_id = window_id

                break

    # plain cycle
    else:
        next_window_index = active_window_index + 1

        if next_window_index >= len(windows):
            next_window_index = 0

        next_window_id = windows[next_window_index][0]

    # raise window ############################################################
    if next_window_id is None:
        exit()

    raise_window_by_window_id(next_window_id)
